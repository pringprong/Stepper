using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Stepper
{
    class Noteset
    {
        string file_type;
        int num_measures;  // number of measures in this noteset
        string note_level; // the level inside the stepfile: Beginner, Easy Medium, Hard, Expert
        int difficulty; // difficulty number, which is just hardcoded here
        int numBeats;
        Random r;
        Measure[] measures;
		NotesetParameters np;
        char[] feet;
        string[] steps;
        string[] foot_laststep;

        public Noteset()
        {

        }

		public Noteset(NotesetParameters notesetparams, string type, int nummeasures, Random random)
		{
			np = notesetparams;
			file_type = type;
			num_measures = nummeasures;
			numBeats = num_measures * StepDeets.beats_per_measure;
			r = random;

			difficulty = 1;
			if (np.dance_level.Equals(StepDeets.Novice))
			{
				note_level = "Beginner";
			}
			else
			{
				note_level = StepDeets.levelTitle(np.dance_level);
			}
			switch (np.dance_level)
			{
				case (StepDeets.Easy):
				difficulty = 4;
				break;
				case (StepDeets.Medium):
				difficulty = 6;
				break;
				case (StepDeets.Hard):
				difficulty = 8;
				break;
				case (StepDeets.Expert):
				difficulty = 10;
				break;
			}
			measures = new Measure[num_measures];
			if (file_type == StepDeets.SSC && np.dance_level == StepDeets.Expert)
			{
				note_level = "Challenge";
			}
			int numfeet = num_measures * numBeats * 2;
			feet = new char[numfeet];
			steps = new string[numfeet];
		}

		public void writeSteps(string file_type, System.IO.StreamWriter file)
		{
			if (file_type.Equals(StepDeets.SM))
			{
				file.WriteLine("#NOTES:");
				file.WriteLine("     " + np.dance_style + ":");
				file.WriteLine("     :");
				file.WriteLine("     " + note_level + ":");
				file.WriteLine("     " + difficulty + ":");
				file.WriteLine("     0.1,0.1,0.1,0.1,0.1:");
				for (int i = 0; i < num_measures; i++)
				{
					measures[i].writeSteps(file);
				}
				file.WriteLine(";");
			}
			else if (file_type.Equals(StepDeets.SSC))
			{
				file.WriteLine("#NOTEDATA:;");
				file.WriteLine("#CHARTNAME:;");
				file.WriteLine("#STEPSTYPE:" + np.dance_style + ";");
				file.WriteLine("#DESCRIPTION:;");
				file.WriteLine("#CHARTSTYLE:;");
				file.WriteLine("#DIFFICULTY:" + note_level + ";");
				file.WriteLine("#METER:" + difficulty + ";");
				file.WriteLine("#RADARVALUES:0.1,0.1,0.1,0.1,0.1;");
				file.WriteLine("#CREDIT:Automatically generated by Stepper;");
				file.WriteLine("#NOTES:");
				for (int i = 0; i < num_measures; i++)
				{
					measures[i].writeSteps(file);
				}
				file.WriteLine(";");
			}
		}

        public void generateSteps()
        {
			foot_laststep = StepDeets.getInitialStep(np.dance_style);
			for (int i = 0; i < num_measures; i++)
            {
                Measure m = new Measure(np, r);
                foot_laststep = m.generateSteps(foot_laststep);
                measures[i] = m;
                char[] thisfoot = m.getFeet();
                for (int index = 0; index < 8; index++)
                {
                    feet[i * StepDeets.beats_per_measure * 2 + index] = thisfoot[index];
                }
                string[] thesesteps = m.getSteps();
                for (int index = 0; index < 8; index++)
                {
                    steps[i * StepDeets.beats_per_measure * 2 + index] = thesesteps[index];
                }
            }
        }

        public char[] getFeet()
        {
            return feet;
        }

        public string[] getSteps()
        {
            return steps;
        }
    }
}
